import React, { useRef } from 'react';
import {SvgIcon} from '@material-ui/core/';

import { GoogleAuth, Submit } from '../styles';
import TextFieldGrouped from '../components/TextFieldGrouped';
import GoogleLogo from '../../../images/google_icon.svg';
import SignUp from '../components/SignUp';
// import { useAuth } from '../../../contexts/AuthContext';

export default function SignUpPage1({ open, handleClose, handleSignUpPage2Open, handleLogInOpen }) {
  const emailRef = useRef<string | undefined>()
  const passwordRef = useRef<string | undefined>()
  // const {signUp} = useAuth()

  // const submitForm = (e) => {
  //   e.preventDefault()
  //   if (typeof emailRef !== "undefined" && typeof passwordRef !== "undefined") {
  //     signUp(emailRef.current.value, passwordRef.current.value)
  //   }else{
  //     console.log("The refs: 'emailRef' and 'passwordRef' are undefined")
  //   }
  // }

  // const goToPage2 = (e) => {
  //   handleSignUpPage2Open()
  // }

  return (
    <SignUp open={open} handleClose={handleClose} handleLogInOpen={handleLogInOpen}>
      <GoogleAuth fullWidth>
        <SvgIcon component={GoogleLogo} viewBox="0 0 600 476.6" />
        Sign up with Google
      </GoogleAuth>
      <h6 className="marginBelowH6">or</h6>
      <input ref={emailRef} type="email" name="" id=""/>
      <TextFieldGrouped />
      {/* <TextFieldGrouped emailRef={emailRef} passwordRef={passwordRef} /> */}
      {/* <Submit fullWidth onClick={submitForm}>Create account</Submit> */}
      {/* <Submit fullWidth onClick={goToPage2}>Create account</Submit> */}
    </SignUp>
  );
}


            <div className="courseCards">
                <CourseCard courseName="AOT 211" />
                <CourseCard courseName="ATLA 265" />
                <CourseCard courseName="GOT 165" />
                <CourseCard courseName="GOT 165" />
                <CourseCard courseName="GOT 165" />
            </div>


import React, { useState } from 'react';
import {SvgIcon} from '@material-ui/core/';

import { GoogleAuth, Submit } from '../styles';
import TextFieldGrouped from '../components/TextFieldGrouped';
import GoogleLogo from '../../../images/google_icon.svg';
import SignUp from '../components/SignUp';
import { useAuth } from '../../../contexts/AuthContext';
import { returnErrorDetails } from '../../../Functions';

export default function SignUpPage1({ open, handleClose, handleSignUpPage2Open, handleLogInOpen }) {
  const [emailEntry, setEmailEntry] = useState(null)
  const [passwordEntry, setPasswordEntry] = useState(null)
  const [textFieldErrorDetails, setTextFieldErrorDetails] = useState(null)
  const {signUp} = useAuth()

  const submitSignUpForm = (e) => {
    e.preventDefault()

    if (emailEntry !== null && passwordEntry !== null) {
      signUp(emailEntry, passwordEntry).catch(err => {
        setTextFieldErrorDetails(returnErrorDetails(err.code))
      })
    }else{
      console.log("Either or both 'emailEntry' and 'passwordEntry' are null")
    }
  }



  // const goToPage2 = (e) => {
  //   handleSignUpPage2Open()
  // }

  return (
    <SignUp open={open} handleClose={handleClose} handleLogInOpen={handleLogInOpen}>
      <GoogleAuth fullWidth>
        <SvgIcon component={GoogleLogo} viewBox="0 0 600 476.6" />
        Sign up with Google
      </GoogleAuth>
      <h6 className="marginBelowH6">or</h6>
      <TextFieldGrouped 
        setEmailEntry={setEmailEntry} setPasswordEntry={setPasswordEntry}
        textFieldErrorDetails={textFieldErrorDetails}
      />
      <Submit fullWidth onClick={submitSignUpForm}>Create account</Submit>
      {/* <Submit fullWidth onClick={goToPage2}>Create account</Submit> */}
    </SignUp>
  );
}


export enum ErrorCodes {
    // createUserWithEmailAndPassword
    InvalidEmail = "auth/invalid-email",
    EmailAlreadyInUse = "auth/email-already-in-use",
    WeakPassword = "auth/weak-password",
    OperationDisallowed = "auth/operation-not-allowed",
}





import React, { useContext, createContext, useState, useEffect } from 'react'
import { auth } from '../firebase/config'

const AuthContext = createContext()

export function useAuth() {
    return useContext(AuthContext)
}

export function AuthProvider({ children }) {
    const [currentUser, setCurrentUser] = useState()
    const [loading, setLoading] = useState(true)

    useEffect(() => {
        const unsuscribe = auth.onAuthStateChanged(user => {
            setLoading(false)
            setCurrentUser(user)
        })
        return unsuscribe
    }, [])

    /*** THese functions are all you need to change if you want to use another BAAS ***/
    function signUp(email, password) {
        return auth.createUserWithEmailAndPassword(email, password)
    }

    function logIn(email, password) {
        return auth.signInWithEmailAndPassword(email, password)
    }
    /*** ******************************** ***/

    const value = {
        currentUser, signUp, logIn
    }

    return(
        <AuthContext.Provider value={value}>
            {/* {currentUser === null && children} */}
            {!loading && children}
        </AuthContext.Provider>
    )
}







import React, { useState, useEffect } from 'react';
import {SvgIcon} from '@material-ui/core/';
import {Link, useHistory} from 'react-router-dom';

import { GoogleAuth, Submit } from '../styles';
import TextFieldGrouped from '../components/TextFieldGrouped';
import GoogleLogo from '../../../images/google_icon.svg';
import SignUp from '../components/SignUp';
import { useAuth } from '../../../contexts/AuthContext';
import { firebase_returnErrorDetails } from '../../../Functions';

export default function SignUpPage1({ open, handleClose, handleLogInOpen }) {
  const [emailEntry, setEmailEntry] = useState('')
  const [passwordEntry, setPasswordEntry] = useState('') 
  const [textFieldErrorDetails, setTextFieldErrorDetails] = useState(null)
  const [submitIsDisabled, setSubmitIsDisabled] = useState(true)
  const [loading, setLoading] = useState(false)
  const {signUp} = useAuth()
  const history = useHistory()

  useEffect(() => {
    if (emailEntry === '' || passwordEntry === '') {
      setSubmitIsDisabled(true)
    } else {
      setSubmitIsDisabled(false)
    }
  }, [emailEntry, passwordEntry])

  const submitSignUpForm = async (e) => {
    e.preventDefault()
    setLoading(true)

    try {
      await signUp(emailEntry, passwordEntry)
      .catch(err => { throw err; })
      history.push('/profilePage')
      setTextFieldErrorDetails(null)
    } catch (err) {
      setTextFieldErrorDetails(firebase_returnErrorDetails(err.code))
    }

    setLoading(false)
  }

  const resetStates = () => {
    setEmailEntry('')
    setPasswordEntry('')
    setTextFieldErrorDetails(null)
    setSubmitIsDisabled(true)
  }

  return (
    <SignUp 
      open={open} handleClose={handleClose} handleLogInOpen={handleLogInOpen} resetStates={resetStates}
    >
      <GoogleAuth fullWidth>
        <SvgIcon component={GoogleLogo} viewBox="0 0 600 476.6" />
        Sign up with Google
      </GoogleAuth>
      <h6 className="marginBelowH6">or</h6>
      <TextFieldGrouped emailEntry={emailEntry} passwordEntry={passwordEntry}
        setEmailEntry={setEmailEntry} setPasswordEntry={setPasswordEntry}
        textFieldErrorDetails={textFieldErrorDetails}
      />
      <Submit disabled={submitIsDisabled && !loading} fullWidth onClick={submitSignUpForm}>
        Create account
      </Submit>
    </SignUp>
  );
}




import { makeStyles } from '@material-ui/core/styles';
import { Button, Select } from '@material-ui/core';
import { TextField } from '@material-ui/core';
import styled, { css } from 'styled-components';

import { primaryFont } from '../../styles/variables';
import { Colors, textFieldFontSize } from '../../EnumsAndConstants';

const shared = {
    border: "2.5px solid "+ Colors.Black,
    borderRadius: '8px',
    lineHeight: '100%',
    padding: '0 1em',
    height: '48px',
    marginBottom: '1.2em'
}

const shared_styles = css`
    border: ${shared.border};
    border-radius: ${shared.borderRadius};
    line-height: ${shared.lineHeight};
    padding: ${shared.padding};
    height: ${shared.height};
    margin-bottom: ${shared.marginBottom};
`;

export const LabelHeader = styled.label`
    font-family: ${primaryFont};
    font-size: 1rem;
    font-weight: 400;
    text-align: center;
    color: black;
    margin: 1em 0;
`;

export const LabelHeader_Small = styled(LabelHeader)`
    font-size: 0.9rem;
    margin-top: 1.5em;
    margin-bottom: 0em;
`

export const FormH6 = styled.h6`
    width: 100%;
    color: $grey;
    text-align: center;
    font-size: 0.9rem;
    line-height: 145%;

    a, button {
        color: ${Colors.Primary};
    }

    button {
        background: none;
    }
`;

export const FormH6_MarginBelow = styled(FormH6)`
    margin-bottom: 1.25em;
`;

export const MajorSelect_OuterDiv = styled.div`
    width: 100%;
    em{
        color: #9F9F9F;
    }
    .MuiOutlinedInput-root{
        border-radius: 8px;
        height: 48px;
    }
    .MuiSelect-icon{
        color: black;
    }
    .MuiOutlinedInput-notchedOutline:focus,
    .MuiOutlinedInput-notchedOutline{
        border: 2.5px solid black;
        border-color: black;
    }
    .MuiSelect-select:focus {
        background-color: white;
    }
`;

export const MajorSelect = styled(Select)`
    && {
        background-color: white;
        color: black;
        border-radius: 8px;
        height: ${shared.height};
        display: flex;
        align-items: 'center';
        .MuiSelect-icon {
            color: black;
        }
    }
`;

export const AuthTextField = styled(TextField)`
    && {
        margin-bottom: ${shared.marginBottom};
        & fieldset {
            border: ${shared.border};
            border-radius: ${shared.borderRadius};
        }
        & p {
            margin-left: 0;
            margin-right: 0;
            font-size: 0.85rem;
            padding: 0 0.5em;
        }
        & input {
            height: ${shared.height};
            padding: ${shared.padding};
            font-size: ${textFieldFontSize};
            &::placeholder {
                color: rgba(0,0,0, 0.9);
            }
        }
        & label {
            font-size: ${textFieldFontSize};
        }
    }
`;

export const GoogleAuthButton = styled(Button)`
    && {
        ${shared_styles}
        background-color: white;
        color: black;
        &:hover {
            background-color: white;
        };
        & svg {
            font-size: 1.3rem;
            margin-right: 0.25em;
        }
    }
`;

export const SubmitButton = styled(Button)`
    && {
        ${shared_styles}
        background-color: black;
        color: white;
        &:hover {
            background-color: black;
        }
    }
`;

export const CourseButtons_Div = styled.div`
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    align-items: center;
    margin: 0.25em 0 1.25em;
    width: 100%;
    flex-wrap: wrap;

    & button{
        font-family: ${primaryFont};
        font-size: 14px;
        font-weight: 400;
        text-align: center;
        color: rgba(0,0,0,0.6);
        width: 30%;
        border: 2.5px solid #DDDDDD;
        border-radius: 8px;
        height: 48px;
        line-height: 100%;
        margin-top: 0.5em;
        background-color: ${Colors.LightGrey};
        transition: all 250ms;
    }

    & button:hover{
        color: ${Colors.Primary};
        border-color: ${Colors.Primary};
        background-color: white;
    }

    & button:first-child{
        margin-left: 0;
    }
`;

const useModalStyles = makeStyles(() => ({
    modal: {
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
    },
    paper: {
        backgroundColor: Colors.White,
        padding: '1.25em',
        outline: 0,
    },
    innerContainer: {
        width: '21em',
        display: 'flex',
        flexDirection: 'column',
        alignItems: 'center',
    }
}));

export default useModalStyles
