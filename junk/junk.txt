

    return (
        <Route
            {...rest }
            render={props => {
                return <Component {...props} />
            }}
        >
        </Route>
    )



    useEffect(() => {
        const fullName = "Josh Jimu"
        const collegeMajor = "Astrophysics"
        const collegeCourses = ["CSC 230", "CSC 230", "CSC 230"]

        setFullName(fullName)
        setCollegeMajor(collegeMajor)
        setCollegeCourses([...collegeCourses])
    }, [])





    useEffect(() => {
        (async () => {
            if (currentUser !== null){
                try {
                     db.collection('users').doc(currentUser.uid)
                    .get().then(snapshot => 
                        setCurrentUserData(snapshot.data())
                    ).catch(err => { throw err; })
                } catch (err) {
                    return returnErrorDetails((err.code))
                }
            }
        })()
    }, [currentUser])


    async function getCurrentUserData() {
        if (currentUser !== null){
            await db.collection('users').doc(currentUser.uid)
            .get().then(snapshot => 
                setCurrentUserData(snapshot.data())
            ).catch(err => { return err; })
        }
    }

    async function getCurrentUserData() {
        if (currentUser !== null){
            await db.collection('users').doc(currentUser.uid)
            .get().then(snapshot => {
                // clg undefined at finishsignup and undefined on first try of login but not on second
                console.log(snapshot.data()) 
                setCurrentUserData(snapshot.data())
            }).catch(err => { return err; })
        }else{
            
        }
    }


useEffect(() => {
        (async () => {
            if (currentUserData) {
                const {fullName, collegeMajor, collegeCourses} = currentUserData
                setFullName(fullName)
                setCollegeMajor(collegeMajor)
                setCollegeCourses([...collegeCourses])
            }
        })()
    }, [currentUserData])



    function signOut() {
        setCurrentUserData(null) //important?
        return auth.signOut()
    }

useEffect(() => {
        async function unsuscribe() {
            const unsuscribe = auth.onAuthStateChanged(user => {
                setLoading(true)
                await setCurrentUser(user)
                await setCurrentUserData(getCurrentUserData())
            })
            return unsuscribe
        }
        return unsuscribe()
    }, [])


function getCurrentUserData() {
        if (currentUser !== null){
            db.collection('users').doc(currentUser.uid)
            .get().then(snapshot => {
                return snapshot.data()
            }).catch(err => { console.log(err); return null })
        }else{
            return null
        }

        if (currentUser === undefined) {
            console.log("Watching to see if undefined")
        }
    }



